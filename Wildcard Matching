  动态规划解法：
      public boolean isMatch(String s, String p) {
        // write your code here
        if(s.length() == 0 && p.length() == 0) return true;
        if(s.length() == 0 || p.length() == 0) return false;
        
        // return isMatch(s,p,0,0);
        boolean[][] res = new boolean[s.length() + 1][p.length() + 1];
        for(int i = 0;i < res.length;i++){
            res[i][0] = false;
        }
        
        for(int i = 0;i < res[0].length;i++){
            res[0][i] = false;
        }
        res[0][0] = true;
        
        for(int i = 1;i < res.length;i++){
            for(int j = 1;j < res[0].length;j++){
                char a = s.charAt(i - 1);
                char b = p.charAt(j - 1);
                boolean m = (b == '?' || b == '*' || a == b);
                res[i][j] = m && res[i - 1][j - 1];
                res[i][j] = res[i][j] || ((res[i][j - 1] || res[i - 1][j]) && 
                        b == '*');
            }
        }
        return res[s.length()][p.length()];
     }


 回溯递归法：
     public boolean isMatch(String s, String p) {
        // write your code here
        if(s.length() == 0 && p.length() == 0) return true;
        if(s.length() == 0 || p.length() == 0) return false;
        return isMatch(s,p,0,0);
        
      }
     
     private boolean isMatch(String s,String p,int i,int j){
         if(s.length() == i && p.length() == j){
             return true;
         }
         
         if(s.length() <= i || p.length() <= j) {
             return false;
         }
         
         char a = s.charAt(i);
         char b = p.charAt(j);
         if(b == '?' || a == b){
             return isMatch(s,p,i + 1,j + 1);
         }else if(b == '*'){
             return isMatch(s,p,i,j + 1) || isMatch(s,p,i + 1,j + 1) || isMatch(s,p,i + 1,j);
         }else{
             return false;
         }
     }
