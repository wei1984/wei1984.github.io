    /**
     * @param nums: A list of integers.
     * @return: A list of unique permutations.
     */
    public ArrayList<ArrayList<Integer>> permuteUnique(ArrayList<Integer> nums) {
        // write your code here
        Collections.sort(nums);
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        if(nums == null || nums.size() == 0) return res;
       
        Map<Integer,Integer> map = new HashMap<Integer,Integer>();
        ArrayList<Integer> tmp = new ArrayList<Integer>();
        permuteUnique(nums,res,tmp,map);
        return res;
    }
    
    private void permuteUnique(ArrayList<Integer> nums,ArrayList<ArrayList<Integer>> res,ArrayList<Integer> tmp,Map<Integer,Integer> map){
        if(tmp.size() == nums.size()){
            res.add(tmp);
            return;
        }
        
        for(int i = 0;i < nums.size();i++){
            int val = nums.get(i);
            if(i > 0 && nums.get(i - 1) == val && !map.containsKey(i - 1)){
                continue;
            }
            if(map.containsKey(i)){
                continue;
            }
            map.put(i,1);
            
            ArrayList<Integer> al = new ArrayList<Integer>();
            al.addAll(tmp);
            al.add(val);
            permuteUnique(nums,res,al,map);
            map.remove(i);
        }
    }
