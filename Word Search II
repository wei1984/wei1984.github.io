    public ArrayList<String> wordSearchII(char[][] board, ArrayList<String> words) {
        // write your code here
        ArrayList<String> res = new ArrayList<String>();
        boolean[][] visited = new boolean[board.length][board[0].length];
        for(int i = 0;i < visited.length;i++){
            Arrays.fill(visited[i],false);
        }
        
        for(String s : words){
           if(wordSearch(board,visited,s)){
               res.add(s);
           }
        }
        return res;
    }
    
    private boolean wordSearch(char[][] board,boolean[][] visited,String word){
        for(int i = 0;i < board.length;i++){
            for(int j = 0;j < board[0].length;j++){
                if(dfs(board,i,j,0,visited,word)){
                    return true;
                }
            }
        }
        return false;
    }
    
    private boolean dfs(char[][] board,int i,int j,int start,boolean[][] visited,String word){
        if(start == word.length()) return true;
        if(i >= board.length || i < 0 || j < 0 || j >= board[0].length || visited[i][j] || word.charAt(start) != board[i][j]) return false;
        visited[i][j] = true;
        boolean b = dfs(board,i + 1,j,start + 1,visited,word) || dfs(board,i - 1,j,start + 1,visited,word) || dfs(board,i,j + 1,start + 1,visited,word) || dfs(board,i,j - 1,start + 1,visited,word);
        visited[i][j] = false;
        return b;
    }
