public class Solution {
    /* you may need to use some attributes here */
    SegmentTreeNode root;
    int[] A;

    /**
     * @param A: An integer array
     */
    public Solution(int[] A) {
        // write your code here
        this.A = A;
        root = build(A,0,A.length - 1);
    }
    
    /**
     * @param start, end: Indices
     * @return: The sum from start to end
     */
    public long query(int start, int end) {
        // write your code here
        return query(root,start,end);
        
    }
    
    private long query(SegmentTreeNode root,int start,int end){
        if(root == null) return 0;
        if(root.start == start && root.end == end){
            return root.sum;
        }
        
        int mid = root.start + (root.end - root.start) / 2;
        if(start > mid){
            return query(root.right,start,end);
        }else if(end <= mid){
            return query(root.left,start,end);
        }else {
            return query(root.left,start,mid) + query(root.right,mid + 1,end);
        }
    }
    
    /**
     * @param index, value: modify A[index] to value.
     */
    public void modify(int index, int value) {
        if(root == null) return;
        modify(root,index,value);
    }
    
    private void modify(SegmentTreeNode root,int index,int value){
        if(root.start == root.end && root.start == index) {
            A[index] = value;
            root.sum = value;
            return;
        }
        
        int mid = root.start + (root.end - root.start) / 2;
        if(index <= mid) { 
            modify(root.left,index,value);
        }else{
            modify(root.right,index,value);
        }
        root.sum = root.left.sum + root.right.sum;
    }
    
    private SegmentTreeNode build(int[] A,int l,int r){
        if(A.length == 0) return null;
        SegmentTreeNode root = new SegmentTreeNode(l,r,(long)A[l]);
        if(l == r) return root;
        int mid = l + (r - l)/2;
        root.left = build(A,l,mid);
        root.right = build(A,mid + 1,r);
        root.sum = root.left.sum + root.right.sum;
        return root;
    }
    
    class SegmentTreeNode {
        int start,end;
        long sum;
        SegmentTreeNode left,right;
        SegmentTreeNode(int start,int end,long sum){
            this.start = start;
            this.end = end;
            this.sum = sum;
        }
    }
}
