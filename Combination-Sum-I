 /**
     * @param candidates: A list of integers
     * @param target:An integer
     * @return: A list of lists of integers
     */
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        // write your code here
        Arrays.sort(candidates);
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> tmp = new ArrayList<Integer>();
        dfs(candidates,0,0,target,tmp,res);
        return res;
    }
    
    private void dfs(int[] num,int start,int sum,int target,List<Integer> tmp,List<List<Integer>> res){
        if(sum >= target){
            if(sum == target && !res.contains(tmp)){
                List<Integer> list = new ArrayList<Integer>(tmp);
                res.add(list);
            }
            return;
        }else{
            for(int i = start;i < num.length;i++){
                tmp.add(num[i]);
                dfs(num,i,sum + num[i],target,tmp,res);
                tmp.remove(tmp.size() - 1);
            }
        }
    }
