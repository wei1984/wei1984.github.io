class TrieNode {
    // Initialize your data structure here.
    Map<Character,TrieNode> map = new HashMap<Character,TrieNode>();
    char c;
    boolean leaf;
    public TrieNode() {
        
    }
    
    public TrieNode(char c){
        this.c = c;
        this.leaf = false;
    }
}

public class Solution {
    private TrieNode root;

    public Solution() {
        root = new TrieNode();
    }

    // Inserts a word into the trie.
    public void insert(String word) {
        TrieNode node = root;
        for(char c : word.toCharArray()){
            if(node.map.containsKey(c)){
                node = node.map.get(c);
            }else{
                TrieNode tmp = new TrieNode(c);
                node.map.put(c,tmp);
                node = tmp;
            }
        }
        node.leaf = true;
    }

    // Returns if the word is in the trie.
    public boolean search(String word) {
        TrieNode node = root;
        for(char c : word.toCharArray()){
            if(!node.map.containsKey(c)){
                return false;
            }
            node = node.map.get(c);
        }
        return node.leaf;
    }

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    public boolean startsWith(String prefix) {
        TrieNode node = root;
        for(char c : prefix.toCharArray()){
            if(!node.map.containsKey(c)){
                return false;
            }
            node = node.map.get(c);
        }
        return true;
    }
}
