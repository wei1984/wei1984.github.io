 ArrayList<ArrayList<String>> solveNQueens(int n) {
        // write your code here
        ArrayList<ArrayList<String>> res = new ArrayList<ArrayList<String>>();
        ArrayList<String> path = new ArrayList<String>();
        dfs(res,path,0,n);
        return res;
    }
    
    private void dfs(ArrayList<ArrayList<String>> res,ArrayList<String> path,int index,int n){
        if(index == n){
            res.add(new ArrayList<String>(path));
        }else{
            for(int i = 0;i < n;i++){
                if(collision(index,i,path)){
                    path.add(generateString(i,n));
                    dfs(res,path,index + 1,n);
                    path.remove(path.size() - 1);
                }
            }
        }
    }
    
    private boolean collision(int index,int i,ArrayList<String> path){
        for(int j = 0;j < path.size();j++){
            String s = path.get(j);
            int k = s.indexOf("Q");
            if(k == i || k == i - (index - j) || k == i + (index - j)) return false;
        }
        return true;
    }
    
    private String generateString(int k,int n){
        StringBuilder sb = new StringBuilder();
        for(int i = 0;i < n;i++){
            if(i == k){
                sb.append("Q");
            }else{ 
                sb.append(".");
            }
        }
        return sb.toString();
    }
