/**
     * @param num: Given the candidate numbers
     * @param target: Given the target number
     * @return: All the combinations that sum to target
     */
    public List<List<Integer>> combinationSum2(int[] num, int target) {
        // write your code here
        Arrays.sort(num);
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        for(int i = 1;i <= num.length;i++){
            List<Integer> tmp = new ArrayList<Integer>();
            dfs(num,0,i,0,target,tmp,res);
        }
        return res;
    }
    
    private void dfs(int[] num,int start,int k,int sum,int target,List<Integer> tmp,List<List<Integer>> res){
        if(k == 0){
            if(sum == target && !res.contains(tmp)){
                List<Integer> list = new ArrayList<Integer>(tmp);
                res.add(list);
            }
            return;
        }
        
        for(int i = start;i < num.length;i++){
            if(sum + num[i] > target) break;
            tmp.add(num[i]);
            dfs(num,i + 1,k - 1,sum + num[i],target,tmp,res);
            tmp.remove(tmp.size() - 1);
        }
    }
