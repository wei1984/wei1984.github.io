
/**
* 如果新来一个数，比堆栈顶的树根的数小，则把这个数作为一个单独的节点压入堆栈。
* 否则，不断从堆栈里弹出树，新弹出的树以旧弹出的树为右子树，连接起来，直到目前堆栈顶的树根的数大于新来的数。
* 然后，弹出的那些数，已经形成了一个新的树，这个树作为新节点的左子树，把这个新树压入堆栈
*/
public TreeNode maxTree(int[] A) {
        // write your code here
        if(A == null || A.length == 0) return null;
        
        Stack<TreeNode> stack = new Stack<TreeNode>();
        for(int i = 0;i < A.length;i++){
            TreeNode newNode = new TreeNode(A[i]);
            if(!stack.empty() && A[i] > stack.peek().val){
                TreeNode old = stack.pop();
                while(!stack.empty() && A[i] > stack.peek().val){
                    TreeNode node = stack.pop();
                    node.right = old;
                    old = node;
                }
                newNode.left = old;
            }
            stack.push(newNode);
        }
        
        TreeNode result = stack.pop();
        while(!stack.empty()){
            TreeNode node = stack.pop();
            node.right = result;
            result = node;
        }
        
        return result;
    }
