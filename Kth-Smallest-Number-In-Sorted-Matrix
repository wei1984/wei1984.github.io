 /**
     * @param matrix: a matrix of integers
     * @param k: an integer
     * @return: the kth smallest number in the matrix
     */
    public int kthSmallest(int[][] matrix, int k) {
        // write your code here
        int n = matrix.length;
        int m = matrix[0].length;
        
        PriorityQueue<List<Integer>> queue = new PriorityQueue<List<Integer>>(2*k,new Comparator<List<Integer>>(){
                @Override
                public int compare(List<Integer> l1,List<Integer> l2){
                    int i1 = l1.get(0);
                    int i2 = l2.get(0);
                    return i1 - i2;
                }
            });
        
        int[][] visited = new int[n][m];
        queue.offer(addQueue(matrix[0][0],0,0));
        while(!queue.isEmpty()){
            k--;
            List<Integer> tmp = queue.poll();
            if(k == 0){
                return tmp.get(0);
            }
            int x = tmp.get(1);
            int y = tmp.get(2);
            
            if(x < n - 1 && visited[x + 1][y] == 0){
                queue.offer(addQueue(matrix[x + 1][y],x + 1,y));
                visited[x + 1][y] = 1;
            }
            if(y < m - 1 && visited[x][y + 1] == 0){
                queue.offer(addQueue(matrix[x][y + 1],x,y + 1));
                visited[x][y + 1] = 1;
            }
        }
        return -1;
    }
    
    private List<Integer> addQueue(int i1,int i2,int i3){
        List<Integer> list = new ArrayList<Integer>();
        list.add(i1);
        list.add(i2);
        list.add(i3);
        return list;
    }
