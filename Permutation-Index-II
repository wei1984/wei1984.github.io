public long permutationIndexII(int[] A) {
        // Write your code here
        long res = 1;
        for(int i = A.length - 1;i >= 0;i--){
            Map<Integer,Integer> hash = new HashMap<Integer,Integer>();
            hash.put(A[i],1);
            int rank = 0;
            for(int j = i + 1;j < A.length;j++){
                if(hash.containsKey(A[j])){
                    hash.put(A[j],hash.get(A[j]) + 1);
                }else{
                    hash.put(A[j],1);
                }
                if(A[i] > A[j]){
                    rank++;
                }
            }
            res += rank * factory(A.length - i - 1) / dup(hash);
        }
        return res;
    }
    
    private long factory(int num){
        long res = 1;
        for(int i = 1;i <= num;i++){
            res *= i;
        }
        return res;
    }
    
    private long dup(Map<Integer,Integer> hash){
        long res = 1;
        for(Integer in : hash.values()){
            res *= factory(in);
        }
        return res;
    }
