public ArrayList<Long> intervalSum(int[] A, 
                                       ArrayList<Interval> queries) {
        // write your code here
        ArrayList<Long> res = new ArrayList<Long>();
        if(A == null) return res;
        SegmentTreeNode root = build(A,0,A.length - 1);
        for(Interval interval : queries){
            res.add(query(root,interval.start,interval.end));
        }
        return res;
    }
    
    private long query(SegmentTreeNode root,int start,int end){
        if(root.start == start && root.end == end) return root.sum;
        int mid = root.start + (root.end - root.start)/2;
        if(start > mid){
            return query(root.right,start,end);
        }else if(end <= mid){
            return query(root.left,start,end);
        }else {
            return query(root.left,start,mid) + query(root.right,mid + 1,end);
        }
    }
    
    private SegmentTreeNode build(int[] A,int l,int r){
        SegmentTreeNode root = new SegmentTreeNode(l,r,(long)A[l]);
        if(l == r) return root;
        int mid = l + (r - l)/2;
        
        root.left = build(A,l,mid);
        root.right = build(A,mid + 1,r);
        root.sum = root.left.sum + root.right.sum;
        return root;
    }
    
    class SegmentTreeNode {
        int start,end;
        long sum;
        SegmentTreeNode left,right;
        SegmentTreeNode(int start,int end,long sum){
            this.start = start;
            this.end = end;
            this.sum = sum;
            this.left = this.right = null;
        }
    }
